+---------------------------+
                        |              CS 330                        |
                        | PROJECT 3: VIRTUAL MEMORY        |
                        |           DESIGN DOCUMENT        |
                        +---------------------------+


---- GROUP ----


>> Fill in the names and email addresses of your group members.


team number : 11
Seunghee Yoon <shy6531@kaist.ac.kr>
DongSu Lee  <chemidong@kaist.ac.kr>


---- PRELIMINARIES ----


>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.


  !!!!!! 1 token !!!!!!!


>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.


                        PAGE TABLE MANAGEMENT
                        =====================


---- DATA STRUCTURES ----


>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.


In ‘vm/page.h’


enum type {
        MEMORY, FILE_t, MMAP, SWAP
};
: Enumeration ‘type’ consist of 4 members that are states where pages can be in. 


struct spte{
        enum type type;
        void * address;
        struct hash_elem hash_elem;
        
off_t offset;
        off_t size;


        struct thread * thread;
        bool writable;


        struct file* file;
        uint32_t swap_index;


        int mapid;
        struct list_elem mmap_elem;
};
: struct spte is for managing a single page structure.


struct thread
{
        ...
        struct hash spt;
}
A hash structure is added into struct thread. spt is a supplement page table that contains ‘spte’s.


In ‘vm/frame.h’


struct fte{
        void* frame;
        struct list_elem elem;
        struct spte *spte;
}
A fte struct is for managing between real frame location and spte. 


 
---- ALGORITHMS ----


>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.


  When ‘load_segment’ is called, frame is allocated. We coded the locating function in vm/frame.c. The function ‘f_allocate’ gets palloc_flags, and address of spte. And then frame address is allocated by function ‘palloc_get_page’ with the parameter, palloc_flag. If frame address is not allocated, evict functions is called. Then we inputted frame address and spte address to fte struct. And We pushed this fte into a list of frame. 




>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?


For this problem, kernel only accesses data of user via user virtual address in our project thus it can avoid aliasing issue.


---- SYNCHRONIZATION ----


>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?


When a frame is newly allocated, a frame lock is used between allocating code section’s start and end. This lock is shared in frame.c. So a race condition never happen. 


---- RATIONALE ----


>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?


We used ‘struct fte’ for virtual-to-physical mapping. And ‘struct spte’ is included in ‘fte’. Virtual pages are made by spte. So using ‘struct fte’ has an advantage that is keeping original spte structure for virtual-to-physical mapping. And if swapping or evict is need, only giving address is enough for the structure. 
 


                       PAGING TO AND FROM DISK
                       =======================


---- DATA STRUCTURES ----


>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.


Same as PAGE TABLE MANAGEMENT part


---- ALGORITHMS ----


>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.


We used FIFO method to choose a frame to evict. There is a list that contains all allocated frame pte. We pop front first element, and then make it swap state. 


>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?


When a frame become free, fte and spte are also deallocated from a frame list and spte hash table. So the changed information is reflected to other processes.  


>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.


Under page fault handler in exception.c, we carefully designed a branch when looking up spte for the faulted address is failed. Under that circumstance, we had to check whether f->esp-32 <= faulted_addr considering fault due to PUSHA operation. When condition is fulfilled, we get another spte by calling get_spte(pg_round_down(fault_addr), MEM, true) where get_spte is our defined method under vm/page.h. We also needed to allocate frame using f_allocate(PAL_USER, spte). Then pagedir_set_page.


---- SYNCHRONIZATION ----


>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)


We used two locks. One is a frame lock, and the other is swap lock. When frame allocation, frame free, swap out situations occur, critical sections are protected by these two locks. And there is no dead lock condition, because all functions in frame.c used only one lock, and swap_out function in swap.c only use one lock. 




>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?


When to evict a frame, we set the type of spte to SWAP, and spte holds swap_index before freeing its frame. P can cause process Q’s frame to be evicted. Consequently, Q jmp to page fault handler but in our design, page fault handler calls get_swap(spte) when type of spte is set to SWAP. That way, there’s no issue of race problem. It is possible for P to set type of Q’s frame into SWAP but not fully evicted before switching context to Q. In that case, intermediate type of Q’s frame is SWAP but Q has no trouble accessing or modifying the page even if the frame is ongoing evicting.


>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?


Read from the file system or swap ultimately requires disk_read operation which is enclosed by disk channel’s lock. So the read operation on disk is solely preserved. Second process Q’s attempt on evicting the frame cannot proceed until the action of read from the file or swap is completed, because swap_out method under frame eviction in our code, also follows to disk operation eventually. Disk_write on the same disk tries to acquire channel’s lock. By implementing swap operation using synch-supported, pre-made disk operation, we could ensure that there’s no interference.
   
>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?


  Our design uses page faults condition. When page faults occurs, we checked a swapped page list whether the fault address page exist in the list or not. If there is a page, we did get_swap() to bring the page. 


---- RATIONALE ----


>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.


We used a single lock method. Although we cannot support high parallelism, the project itself was genuinely challenging.


                         MEMORY MAPPED FILES
                         ===================


---- DATA STRUCTURES ----


>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.


In ‘threads/thread.h’
struct thread
{
        …
        int mapid;
        struct list mmap_lst;
}
To support mmap and munmap, we added mapid and mmap_lst. 


---- ALGORITHMS ----


>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.


We added a ‘MMAP’ state to our supplement page entry. So we could manage memory mapped files using same supplement page entry. And a thread has a mmap_list which contains mmap spte. So mmap sptes are separated from other pages. 


>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.


We used get_spte() function to get mmap pages. get_spte() function uses malloc(), so it doesn’t overlap existing segment. 


---- RATIONALE ----


>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.


As above problem states, semantics of mapping a file have similarity with loading an executable from file on demand. Thus the structure of our mmap method in that perspective, is alike with the load_segment method predefined in userprog/process.c. 
e.g) while loop which holds a condition to check whether read_bytes is greater than 0, decrement read_bytes by page_read_byte(either PGSIZE or less)  at the rear part of the loop, get spt entry for each PGSIZE, etc.
The main difference is, we differentiate spt entry’s type by granting MMAP type under syscall mmap while the type FILE_t was granted under load_segment.
Setting of types and other attributes for each page was conducted only once in the implementation of load_segment on the top, but the respective action has been done multiple times under implementation of our mmap syscall. This was preferable for mmap since each spte contains different attribute, ‘offset’.
Also, there were several failing conditions to be handled in mmap syscall that should not make any effect on the implementation of load_segment.

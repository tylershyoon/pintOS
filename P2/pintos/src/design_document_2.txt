+-----------------------------------------+
| CS 330                                                   |
| PROJECT 2: USER PROGRAMS        |
| DESIGN DOCUMENT                 |
+-----------------------------------------+
 
---- GROUP ----
 
>> Fill in the names and email addresses of your group members.
 team number : 11
Seunghee Yoon <shy6531@kaist.ac.kr>
DongSu Lee  <chemidong@kaist.ac.kr>


---- PRELIMINARIES ----
 
>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.
 We are using 6 tokens for this project (project 2)
>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.
 


  ARGUMENT PASSING
  ================
 
 
---- DATA STRUCTURES ----
 
>> A1: Copy here the declaration of each new or changed `struct' or `struct' member, global or static variable, `typedef', or enumeration.  Identify the purpose of each in 25 words or less.
 We did not need any additional declaration or modification on structures for argument passing. We’ll discuss fully for what we have added in struct in latter sections. 


---- ALGORITHMS ----
 
>> A2: Briefly describe how you implemented argument parsing.  How do you arrange for the elements of argv[] to be in the right order? How do you avoid overflowing the stack page?
 we implemented argument passing under start_process(void *f_name) function. Before calling load, we tokenized file name, passed it to load function. the return value of load determines whether load is successful or not. If load is successful, we decremented esp of interrupt frame with the amount of file length. Then we copied the file name using memcpy function supplied by pintos. Tokenized file name contained its procedure call name with its arguments. By decrementing the length and then copying, we could insert argv[] in desired order. After that, we put sufficient number of zeros in order to align, and then put zero again for ensuring argv[length] = 0. At this point, we have stored argc which indicates the number of arguments. Using for - loop, we inserted each arguments address to the stack one by one. We inserted argv address at the end and then argc value. Finally, there’s only fake return address namely 0, remained. Under our implementation using memcpy, there was no need consider about overflow of the stack page.
---- RATIONALE ----
 
>> A3: Why does Pintos implement strtok_r() but not strtok()?
 strtok() uses static buffer to save next pointer. So if context switching occurs, thread safe would not be safe for strtok(). But strtok_r() saves the next pointer on third argument. So the next starting pointer will be safe.  
>> A4: In Pintos, the kernel separates commands into a executable name and arguments.  In Unix-like systems, the shell does this separation.  Identify at least two advantages of the Unix approach.
 First advantage is that it is easy to apply for new commands. Because Unix uses executable name for first parameter, if path is added for the environment, adding a executable file can be a method to make a new command. And the way of giving arguments is same for all commands, so that users only need to concern the criteria for that arguments.  
    SYSTEM CALLS
    ============
 
---- DATA STRUCTURES ----
 
>> B1: Copy here the declaration of each new or changed `struct' or `struct' member, global or static variable, `typedef', or enumeration.  Identify the purpose of each in 25 words or less.
struct list process_list /* refers to every processes -> needed in process wait in order to retrieve a process by pid/tid */
 struct thread_file
{
        struct file* file;
        int fd;
        struct list_elem file_elem;
}
purpose is to treat files in syscall functions and handler. Especially used for indicating and granting fd in file related syscalls.
 Added 
struct semaphore wait_sema /* semaphore for make process wait using sema_down in process wait */
int exit_status /* in order to get child’s status when exit, return status in other words */
int fd_grant /* in order to give file incremented fd number */
struct list file_list /* thread holds a list of files which it opens and uses */
struct file* executable /* used to handle deny write to executables */ 
>> B2: Describe how file descriptors are associated with open files. Are file descriptors unique within the entire OS or just within a single process?
There are reserved two file descriptors. 0 is STDIN, and 1 is STDOUT. Other file descriptors are larger than 1 and given by OS policy. And it’s not unique for entire OS.  
 
---- ALGORITHMS ----
 
>> B3: Describe your code for reading and writing user data from the kernel.
 if fd = 0, read from STDIN. if fd = 1, write at STDOUT. Other cases, we used file list. At there, file is found by fd. And if it’s not NULL, we used file_read() and file_write() function given by pintos. 
>> B4: Suppose a system call causes a full page (4,096 bytes) of data to be copied from user space into the kernel.  What is the least and the greatest possible number of inspections of the page table (e.g. calls to pagedir_get_page()) that might result?  What about for a system call that only copies 2 bytes of data?  Is there room for improvement in these numbers, and how much?
 At full page, the least case is one, and the greatest case would be 4096. And 2 bytes, the least case is one, and the greatest case would be 2. There is no idea for the improvement.


>> B5: Briefly describe your implementation of the "wait" system call and how it interacts with process termination.
First check whether the child_tid is valid. And then sema-down for a semaphore. It is released after the child process exits. Then save the child process’s exit status and remove the child from parent’s child list. And then release a semaphore that is locked at the end of process exit. 
>> B6: Any access to user program memory at a user-specified address can fail due to a bad pointer value.  Such accesses must cause the process to be terminated.  System calls are fraught with such accesses, e.g. a "write" system call requires reading the system call number from the user stack, then each of the call's three arguments, then an arbitrary amount of user memory, and any of these can fail at any point.  This poses a design and error-handling problem: how do you best avoid obscuring the primary function of code in a morass of error-handling?  Furthermore, when an error is detected, how do you ensure that all temporarily allocated resources (locks, buffers, etc.) are freed?  In a few paragraphs, describe the strategy or strategies you adopted for managing these issues.  Give an example.
We checked whether pointer is not user address space, is NULL, and the pagedir_get_page is NULL. And if there is even one case of them, the thread exits. We cannot sure all locks and buffers are freed. 
 
---- SYNCHRONIZATION ----
 
>> B7: The "exec" system call returns -1 if loading the new executable fails, so it cannot return before the new executable has completed loading.  How does your code ensure this?  How is the load success/failure status passed back to the thread that calls "exec"?
 We used wait_sema to ensure between process_execute and start_process. And load state is ensured by another thread value, success. 
>> B8: Consider parent process P with child process C.  How do you ensure proper synchronization and avoid race conditions when P calls wait(C) before C exits?  After C exits?  How do you ensure that all resources are freed in each case?  How about when P terminates without waiting, before C exits?  After C exits?  Are there any special cases?
When P calls wait(C) before C exits, a sema is acquired until right before C exits. After C exits, it’s not in P’s child list. So it’s fail. Every page is freed at the process exit. When P terminates without waiting before C exits, P pop all child it had from the child list. And all the child’s sema is up. So there is no orphan. After C exits, there’s no need to consider about child. 
---- RATIONALE ----
 
 
>> B9: Why did you choose to implement access to user memory from the kernel in the way that you did?
We haven’t touched this problem/ we cannot understand what the problem asks. 
>> B10: What advantages or disadvantages can you see to your design for file descriptors?
 When we assign fd, we started from 2 and every time a process opens a file, it grants a incremented fd whether the file has closed or not. Advantage - coding easiness, Disadvantage - there can be blank between fds if files are closed.
>> B11: The default tid_t to pid_t mapping is the identity mapping. If you changed it, what advantages are there to your approach?
 We have not changed any. Specifically, we haven’t used pid_t much since there was no need to maintain.
  SURVEY QUESTIONS
  ================
 
Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.
 
>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?
 
>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?
 
>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
 
>> find any of our guidance to be misleading?
 
>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?
 
>> Any other comments?